!function(e) {
    e.fn.imageUploader = function(t) {
        let a = {
            preloaded: [],
            imagesInputName: "images",
            preloadedInputName: "preloaded",
            label: "Drag & Drop files here or click to browse",
            multiple: true // Added option to control multiple attribute
        },
        n = this;
        
        n.settings = {};
        let i = new DataTransfer;
        
        n.init = function() {
            n.settings = e.extend(n.settings, a, t);
            n.each(function(t, a) {
                let i = d();
                if (e(a).append(i),
                    i.on("dragover", l.bind(i)),
                    i.on("dragleave", l.bind(i)),
                    i.on("drop", p.bind(i)),
                    n.settings.preloaded.length) {
                    i.addClass("has-files");
                    let o = i.find(".uploaded");
                    for (let r = 0; r < n.settings.preloaded.length; r++)
                        o.append(s(n.settings.preloaded[r].src, n.settings.preloaded[r].id, !0))
                }
            })
        };

        let d = function() {
            let t = e("<div>", { class: "image-uploader" }),
                a = e("<input>", {
                    type: "file",
                    id: n.settings.imagesInputName + "-" + u(),
                    name: n.settings.imagesInputName + "[]",
                    multiple: n.settings.multiple // Set multiple attribute based on option
                }).appendTo(t),
                i = (e("<div>", { class: "uploaded" }).appendTo(t),
                    e("<div>", { class: "upload-text" }).appendTo(t));
            return e("<i>", { class: "material-icons", text: "cloud_upload" }).appendTo(i),
                e("<span>", { text: n.settings.label }).appendTo(i),
                t.on("click", function(e) { o(e), a.trigger("click") }),
                a.on("click", function(e) { e.stopPropagation() }),
                a.on("change", p.bind(t)),
                t
        };

        let o = function(e) {
            e.preventDefault(), e.stopPropagation()
        };

        let s = function(t, a, d = !1) {
            let s = e("<div>", { class: "uploaded-image" }),
                l = (e("<img>", { src: t }).appendTo(s),
                    e("<button>", { class: "delete-image" }).appendTo(s));
            return e("<i>", { class: "material-icons", text: "clear" }).appendTo(l),
                d ? (s.attr("data-preloaded", !0),
                    e("<input>", { type: "hidden", name: n.settings.preloadedInputName + "[]", value: a }).appendTo(s))
                    : s.attr("data-index", a),
                l.on("click", function(e) {
                    if (o(e), !d) {
                        let t = parseInt(s.data("index"));
                        i.items.remove(t), c()
                    }
                    s.remove(), s.closest(".image-uploader").find(".uploaded-image").length || s.closest(".image-uploader").removeClass("has-files"),
                    s.closest(".image-uploader").find('input[type="file"]').prop("files", i.files)
                }), s
        };

        let l = function(t) {
            o(t), "dragover" === t.type ? e(this).addClass("drag-over") : e(this).removeClass("drag-over")
        };

        let p = function(t) {
            o(t);
            let a = e(this);
            a.removeClass("drag-over");
            r(a, t.target.files || t.originalEvent.dataTransfer.files)
        };

        let r = function(t, a) {
            if (!n.settings.multiple) {
                i = new DataTransfer(); // Reset DataTransfer for single file upload
                t.find(".uploaded").empty(); // Clear existing previews
                t.removeClass("has-files"); // Remove 'has-files' class if previously set
            }
            t.addClass("has-files");
            let d = t.find(".uploaded"),
                o = t.find('input[type="file"]');
            e(a).each(function(e, t) {
                i.items.add(t);
                d.append(s(URL.createObjectURL(t), i.items.length - 1));
                if (!n.settings.multiple) return false; // Stop loop after first file for single file upload
            }),
            o.prop("files", i.files)
        };

        let c = function() {
            e(".uploaded-image[data-index]").each(function(t, a) {
                e(a).attr("data-index", t)
            })
        };

        let u = function() {
            return Date.now() + Math.floor(100 * Math.random() + 1)
        };

        return this.init(), this
    }
}(jQuery);

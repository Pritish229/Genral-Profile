(function ($) {
  $.fn.imageUploader = function (opts) {
    const defaults = {
      preloaded: [],
      imagesInputName: "images",
      preloadedInputName: "preloaded",
      label: "Drag & Drop files here or click to browse",
      multiple: true
    };

    const ns = this;
    ns.settings = {};

    ns.init = function () {
      ns.settings = $.extend({}, defaults, opts);

      ns.each(function (_i, hostEl) {
        const $host = $(hostEl);
        const $uploader = buildUploader($host);
        $host.empty().append($uploader);

        // Maintain a DataTransfer per uploader
        $uploader.data('dt', new DataTransfer());

        // Drag & drop only in multiple mode
        if (ns.settings.multiple) {
          $uploader.on("dragover", dragToggle.bind($uploader));
          $uploader.on("dragleave", dragToggle.bind($uploader));
          $uploader.on("drop", onDrop.bind($uploader));
        }

        // Preloaded support
        if (Array.isArray(ns.settings.preloaded) && ns.settings.preloaded.length) {
          $uploader.addClass("has-files");
          const $uploaded = $uploader.find(".uploaded");
          ns.settings.preloaded.forEach(pl => {
            $uploaded.append(makeThumb(pl.src, pl.id, true, $uploader));
          });
        }
      });
    };

    function fileInputName(baseName, isMultiple) {
      return isMultiple ? (baseName.endsWith('[]') ? baseName : baseName + '[]') : baseName;
    }
    function buildUploader($host) {
      const isSingle = !ns.settings.multiple;
      const uploaderClass = isSingle ? "image-uploader single-uploader" : "image-uploader";
      const $wrap = $("<div>", { class: uploaderClass });

      const inputId = ns.settings.imagesInputName + "-" + uid();

      // Name should be "avatar_url" for single, and "avatar_url[]" for multiple
      const inputName = fileInputName(ns.settings.imagesInputName, ns.settings.multiple);

      const $input = $("<input>", {
        type: "file",
        id: inputId,
        name: inputName,                           // << conditional name
        multiple: ns.settings.multiple
      }).appendTo($wrap);

      $("<div>", { class: "uploaded" }).appendTo($wrap);

      const $labelBox = $("<div>", { class: "upload-text text-primary" }).appendTo($wrap);
      $("<span>", { class: "upload-icon fs-4 text-primary", html: "&#8682;" }).appendTo($labelBox);
      $("<span>", { text: ns.settings.label }).appendTo($labelBox);

      $wrap.on("click", function (e) {
        if ($(e.target).closest('.delete-image').length) return;
        prevent(e);
        $input.trigger("click");
      });
      $input.on("click", function (e) { e.stopPropagation(); });
      $input.on("change", onInputChange.bind($wrap));

      // Delegated delete (unchanged)
      $wrap.on("click", ".delete-image", function (e) {
        prevent(e);
        const $thumbEl = $(this).closest('.uploaded-image');
        const $uploaderEl = $thumbEl.closest('.image-uploader');
        const $fileInput = $uploaderEl.find('input[type="file"]');
        const isPre = $thumbEl.attr("data-preloaded") === "1";

        if (!isPre && $fileInput.length) {
          const oldFiles = $fileInput.files;
          const idx = parseInt($thumbEl.attr("data-index"), 10);
          if (!Number.isNaN(idx) && oldFiles && oldFiles.length) {
            const dtNew = new DataTransfer();
            for (let i = 0; i < oldFiles.length; i++) {
              if (i !== idx) dtNew.items.add(oldFiles[i]);
            }
            $uploaderEl.data('dt', dtNew);
            try { $fileInput.files = dtNew.files; } catch (_) { }
          }
        }

        $thumbEl.remove();

        if (!$uploaderEl.hasClass('single-uploader')) reindex($uploaderEl);

        const $remaining = $uploaderEl.find(".uploaded-image");
        if ($remaining.length === 0) {
          $uploaderEl.removeClass("has-files drag-over");
          $uploaderEl.data('dt', new DataTransfer());
          if ($fileInput.length) $fileInput.val('');
        }
      });

      return $wrap;
    }

    function prevent(e) { e.preventDefault(); e.stopPropagation(); }

    function makeThumb(src, idxOrId, isPreloaded, $uploader) {
      const $thumb = $("<div>", { class: "uploaded-image" });
      $("<img>", { src }).appendTo($thumb);

      $("<button>", { class: "delete-image", type: "button", 'aria-label': 'Remove image' })
        .append($("<span>", { class: "delete-icon", html: "&times;" }))
        .appendTo($thumb);

      if (isPreloaded) {
        $thumb.attr("data-preloaded", "1");
        $("<input>", {
          type: "hidden",
          name: ns.settings.preloadedInputName + "[]",
          value: idxOrId
        }).appendTo($thumb);
      } else {
        $thumb.attr("data-index", idxOrId);
      }
      return $thumb;
    }

    function dragToggle(e) {
      prevent(e);
      if (e.type === "dragover") $(this).addClass("drag-over");
      else $(this).removeClass("drag-over");
    }

    function onDrop(e) {
      prevent(e);
      const $uploader = $(this);
      $uploader.removeClass("drag-over");
      const files = e.originalEvent && e.originalEvent.dataTransfer ? e.originalEvent.dataTransfer.files : [];
      addFiles($uploader, files);
    }

    function onInputChange(e) {
      prevent(e);
      const $uploader = $(this);
      const files = e.target.files || [];
      addFiles($uploader, files);
    }

    function addFiles($uploader, files) {
      let dt = $uploader.data('dt');
      const $uploaded = $uploader.find(".uploaded");
      const $input = $uploader.find('input[type="file"]');

      if (!ns.settings.multiple) {
        dt = new DataTransfer();
        $uploader.data('dt', dt);
        $uploaded.empty();
        $uploader.removeClass("has-files");
      }

      let added = 0;
      Array.from(files).some(file => {
        dt.items.add(file);
        $uploaded.append(makeThumb(URL.createObjectURL(file), dt.items.length - 1, false, $uploader));
        added++;
        return !ns.settings.multiple;
      });

      if (added > 0) {
        $uploader.addClass("has-files");
        if ($input.length) {
          try { $input.files = dt.files; } catch (_) { }
        }
      }
    }

    function reindex($uploaderEl) {
      $uploaderEl.find(".uploaded-image[data-index]").each(function (i, el) {
        $(el).attr("data-index", i);
      });
    }

    function uid() {
      return Date.now() + Math.floor(Math.random() * 100 + 1);
    }

    return ns.init(), ns;
  };
})(jQuery);